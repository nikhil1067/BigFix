<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Data Compilation</Title>
		<Description><![CDATA[&lt;enter a description of the problem and the corrective action here&gt; ]]></Description>
		<Relevance>true</Relevance>
		<Category></Category>
		<Source>Internal</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2024-12-17</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Wed, 18 Dec 2024 14:37:00 +0000</Value>
		</MIMEField>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[action uses wow64 redirection false

parameter "BESClient_Folder" = "{(value "EnterpriseClientFolder" of keys "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\BigFix\EnterpriseClient" of native registry) as string}"
parameter "BESUploadManager_Folder" = "{(value "EnterpriseServerFolder" of keys "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\BigFix\Enterprise Server" of native registry) as string & "UploadManagerData\BufferDir\sha1"}"
parameter "Output_Folder" = "{(parameter "BESClient_Folder") & "BigFix Application Control\Archived Data"}"

if {not exists folder (parameter "Output_Folder")}
folder create "{parameter "Output_Folder"}"
endif

delete __createfile

createfile until END_OF_FILE

# Define Folder Paths and Parameters
$SourceFolder = "{parameter "BESUploadManager_Folder"}"
$DestinationFolder = "{parameter "Output_Folder"}"
$MoveString = "BigFixApplicationControl"
$MergedOutputFile = Join-Path $DestinationFolder "UnapprovedApplicationsList.csv"

# Move Files Containing Specific String in the Name
$FilesToMove = Get-ChildItem -Path $SourceFolder -Recurse | ? {{$_.Name -like "*$MoveString*"}
foreach ($File in $FilesToMove) {{
    $DestinationPath = Join-Path -Path $DestinationFolder -ChildPath $File.Name
    Write-Output "Moving file: $($File.Name) to $DestinationPath"
    Move-Item -Path $File.FullName -Destination $DestinationPath -Force
}

# Merge All CSV Files in Source Folder (After Moving)
$CSVFiles = Get-ChildItem -Path $DestinationFolder -Filter *.csv -File
$CombinedData = @()

foreach ($CSVFile in $CSVFiles) {{
    Write-Output "Merging file: $($CSVFile.Name)"
    $Data = Import-Csv -Path $CSVFile.FullName
    $CombinedData += $Data
}

# Step 4: Export Combined Data to the Destination Folder
if ($CombinedData.Count -gt 0) {{
    $CombinedData | Export-Csv -Path $MergedOutputFile -NoTypeInformation -Force
    Write-Output "All CSV files merged successfully! Output saved to: $MergedOutputFile"
} else {{
    Write-Error "No CSV files found to merge in the source folder."
}

Write-Output "Task Completed."

END_OF_FILE

delete powershell.ps1
move __createfile powershell.ps1

waithidden "{pathname of file ((it as string) of value "Path" of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" of native registry)}" -ExecutionPolicy Bypass -File "powershell.ps1"]]></ActionScript>
			<SuccessCriteria Option="RunToCompletion"></SuccessCriteria>
		</DefaultAction>
	</Fixlet>
</BES>
