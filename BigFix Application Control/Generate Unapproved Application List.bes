<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Generate Unapproved Application List</Title>
		<Description><![CDATA[&lt;enter a description of the problem and the corrective action here&gt; ]]></Description>
		<Relevance>true</Relevance>
		<Category></Category>
		<Source>Internal</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2024-12-17</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Thu, 19 Dec 2024 07:17:25 +0000</Value>
		</MIMEField>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[action uses wow64 redirection false

parameter "BESClient_Folder" = "{(value "EnterpriseClientFolder" of keys "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\BigFix\EnterpriseClient" of native registry) as string}"
parameter "Output_Folder" = "{(value "EnterpriseClientFolder" of keys "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\BigFix\EnterpriseClient" of native registry) as string & "BigFix Application Control"}"

if {not exists folder (parameter "Output_Folder")}
folder create "{parameter "Output_Folder"}"
endif

delete __createfile

createfile until END_OF_FILE

# Define the whitelist file path (ensure it contains one application name per line)
$whitelistPath = "{parameter "BESClient_Folder"}\__BESData\CustomSite_BigFix_Application_Control\Whitelisted_Applications.txt"

# Define the output CSV file path
$outputCsvPath = "{parameter "Output_Folder"}\UnlistedApplications-{computer name}.csv"

# Load the whitelist into a variable
$whitelistedApps = Get-Content -Path $whitelistPath | ForEach-Object {{ $_.Trim() }

# Initialize a dictionary to store non-whitelisted applications
$unlistedApplications = @{{}

# Get the list of installed applications from the registry
$installedApps = @()
$registryPaths = @(
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*",
    "HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*",
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*"
)

foreach ($path in $registryPaths) {{
    $installedApps += Get-ItemProperty -Path $path -ErrorAction SilentlyContinue | Where-Object {{ $_.DisplayName } | Select-Object DisplayName, InstallLocation
}

# Check each installed application against the whitelist
foreach ($app in $installedApps) {{
    $appName = $app.DisplayName.Trim()
    $installPath = $app.InstallLocation

    if (-not ($whitelistedApps -contains $appName)) {{
        # Add the application to the dictionary
        $unlistedApplications[$appName] = $installPath
    }
}

# Convert the dictionary to a format suitable for export to CSV
$csvData = $unlistedApplications.GetEnumerator() | ForEach-Object {{
    [PSCustomObject]@{{
	ComputerName = "{computer name}"
        ApplicationName = $_.Key
        InstallPath = $_.Value
    }
}

# Export the dictionary to a CSV file
$csvData | Export-Csv -Path $outputCsvPath -NoTypeInformation -Encoding UTF8

END_OF_FILE

delete powershell.ps1
move __createfile powershell.ps1

waithidden "{pathname of file ((it as string) of value "Path" of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" of native registry)}" -ExecutionPolicy Bypass -File "powershell.ps1"

setting "_BESClient_ArchiveManager_OperatingMode" = "2" on "{parameter "action issue date" of action}" for client
setting "_BESClient_ArchiveManager_FileSet-(BigFixApplicationControl)" = "{parameter "Output_Folder"}\UnlistedApplications-{computer name}.csv" on "{parameter "action issue date" of action}" for client
setting "_BESClient_ArchiveManager_MaxArchiveSize" = "1000000" on "{parameter "action issue date" of action}" for client
setting "_BESClient_ArchiveManager_SendAll" = "0" on "{parameter "action issue date" of action}" for client
setting "_BESClient_ArchiveManager_KeepFileSet-(BigFixApplicationControl)" = "1" on "{parameter "action issue date" of action}" for client

parameter "start" = "{now}"

archive now

pause while {now < ((parameter "start" of action) as time) + ("00:01:00" as time interval)}

setting delete "_BESClient_ArchiveManager_FileSet-(BigFixApplicationControl)" on "{now}" for client]]></ActionScript>
			<SuccessCriteria Option="RunToCompletion"></SuccessCriteria>
		</DefaultAction>
	</Fixlet>
</BES>
