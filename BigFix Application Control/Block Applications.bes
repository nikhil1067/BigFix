<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Block Applications</Title>
		<Description><![CDATA[&lt;enter a description of the problem and the corrective action here&gt; ]]></Description>
		<Relevance>true</Relevance>
		<Category></Category>
		<Source>Internal</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2024-12-19</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Thu, 19 Dec 2024 16:59:02 +0000</Value>
		</MIMEField>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[action uses wow64 redirection false

parameter "BESClient_Folder" = "{(value "EnterpriseClientFolder" of keys "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\BigFix\EnterpriseClient" of native registry) as string}"
parameter "Output_Folder" = "{(parameter "BESClient_Folder") & "BigFix Application Control"}"

if {not exists folder (parameter "Output_Folder")}
folder create "{parameter "Output_Folder"}"
endif

delete __createfile

createfile until END_OF_FILE

# Define the folder for storing logs
$logFolder = "{parameter "Output_Folder"}\Logs"

# Define the file paths for blacklisted application names and executables
$blacklistFile = "{parameter "Output_Folder"}\UnlistedApplications-{computer name}.csv"
$blacklistExeFile = "{parameter "BESClient_Folder"}\__BESData\CustomSite_BigFix_Application_Control\Blacklisted_Applications.csv"

# Check if the folder exists, if not, create it
if (-not (Test-Path -Path $logFolder)) {{
    New-Item -Path $logFolder -ItemType Directory -Force | Out-Null
}

# Generate the log file path with the current date
$logFile = Join-Path -Path $logFolder -ChildPath "$(Get-Date -Format 'yyyyMMdd').txt"

# Function to write detailed logs with timestamps
function Write-Log {{
    param (
        [string]$message
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "$timestamp - $message"
    Write-Host $logMessage
    Add-Content -Path $logFile -Value $logMessage
}

# Log script start
Write-Log "Script started."

# Check if the blacklist files exist
if (-not (Test-Path -Path $blacklistFile)) {{
    Write-Log "Error: Blacklist file for applications not found at $blacklistFile"
    exit 1
}
if (-not (Test-Path -Path $blacklistExeFile)) {{
    Write-Log "Error: Blacklist file for executables not found at $blacklistExeFile"
    exit 1
}

Write-Log "Blacklist files found."

# Read application names and executable names from the files
$blacklistedApps = Import-Csv -Path $blacklistFile | Select-Object -ExpandProperty "ApplicationName"
$blacklistedExecutables = Import-Csv -Path $blacklistExeFile | Select-Object -ExpandProperty "Executable"

# Ensure there are items in the files
if (-not $blacklistedApps) {{
    Write-Log "Error: No applications found in the blacklist file."
    exit 1
}
if (-not $blacklistedExecutables) {{
    Write-Log "Error: No executables found in the blacklist file."
    exit 1
}

Write-Log "Blacklisted applications loaded: $($blacklistedApps -join ', ')."
Write-Log "Blacklisted executables loaded: $($blacklistedExecutables -join ', ')."

# Track terminated processes
$terminatedProcesses = @()

# Loop through all blacklisted applications
foreach ($app in $blacklistedApps) {{
    $matchedProcesses = Get-Process | Where-Object {{
        $_.MainModule.FileVersionInfo.ProductName -eq $app
    }

    if ($matchedProcesses) {{
        Write-Log "Processes found for blacklisted application: $app."

        foreach ($process in $matchedProcesses) {{
            Write-Log "Terminating process: $app (ID: $($process.Id)) - Blacklisted application: $app."

            try {{
                Stop-Process -Id $process.Id -Force -ErrorAction Stop
                Write-Log "Process $($process.Name) (ID: $($process.Id)) terminated successfully."
                $terminatedProcesses += $app
            } catch {{
                Write-Log "Error terminating process $($process.Name) (ID: $($process.Id)): $_"
            }
        }
    } else {{
        Write-Log "No running processes found for blacklisted application: $app."
    }
}

# Loop through all blacklisted executables
foreach ($exe in $blacklistedExecutables) {{
    $matchedProcesses = Get-Process | Where-Object {{
        $_.Name -like $exe
    }

    if ($matchedProcesses) {{
        Write-Log "Processes found for blacklisted executable: $exe."

        foreach ($process in $matchedProcesses) {{
            Write-Log "Terminating process: $($process.Name) (ID: $($process.Id)) - Blacklisted executable: $exe."

            try {{
                Stop-Process -Id $process.Id -Force -ErrorAction Stop
                Write-Log "Process $($process.Name) (ID: $($process.Id)) terminated successfully."
                $terminatedProcesses += $process.Name
            } catch {{
                Write-Log "Error terminating process $($process.Name) (ID: $($process.Id)): $_"
            }
        }
    } else {{
        Write-Log "No running processes found for blacklisted executable: $exe."
    }
}

# Display a single popup message for terminated processes
if ($terminatedProcesses.Count -gt 0) {{
    $terminatedList = $terminatedProcesses | Sort-Object | Get-Unique | ForEach-Object {{ "â€¢ $_" } | Out-String
    $popupMessage = "Warning Notification from BigFix Admin`nThe following applications are blocked because they fall under blacklisted applications within our environment:`n$terminatedList"

    try {{
        Write-Log "Sending popup to user."

        Start-Process -FilePath "msg.exe" -ArgumentList "* /TIME:10 $popupMessage" -NoNewWindow
        Write-Log "Popup displayed successfully."
    } catch {{
        Write-Log "Error displaying popup: $_"
    }
} else {{
    Write-Log "No blacklisted processes were terminated."
}

Write-Log "Script completed."

END_OF_FILE

delete powershell.ps1
move __createfile powershell.ps1

override wait
completion=job
hidden=true
runas=currentuser
wait "{pathname of file ((it as string) of value "Path" of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" of native registry)}" -ExecutionPolicy Bypass -File "powershell.ps1"]]></ActionScript>
			<SuccessCriteria Option="RunToCompletion"></SuccessCriteria>
			<Settings>
				<PreActionShowUI>false</PreActionShowUI>
				<HasRunningMessage>false</HasRunningMessage>
				<HasTimeRange>false</HasTimeRange>
				<HasStartTime>false</HasStartTime>
				<HasEndTime>false</HasEndTime>
				<HasDayOfWeekConstraint>false</HasDayOfWeekConstraint>
				<UseUTCTime>false</UseUTCTime>
				<ActiveUserRequirement>NoRequirement</ActiveUserRequirement>
				<ActiveUserType>AllUsers</ActiveUserType>
				<HasWhose>false</HasWhose>
				<PreActionCacheDownload>false</PreActionCacheDownload>
				<Reapply>true</Reapply>
				<HasReapplyLimit>false</HasReapplyLimit>
				<HasReapplyInterval>false</HasReapplyInterval>
				<HasRetry>false</HasRetry>
				<HasTemporalDistribution>false</HasTemporalDistribution>
				<ContinueOnErrors>true</ContinueOnErrors>
				<PostActionBehavior Behavior="Nothing"></PostActionBehavior>
				<IsOffer>false</IsOffer>
			</Settings>
			<SettingsLocks>
				<ActionUITitle>false</ActionUITitle>
				<PreActionShowUI>false</PreActionShowUI>
				<PreAction>
					<Text>false</Text>
					<AskToSaveWork>false</AskToSaveWork>
					<ShowActionButton>false</ShowActionButton>
					<ShowCancelButton>false</ShowCancelButton>
					<DeadlineBehavior>false</DeadlineBehavior>
					<ShowConfirmation>false</ShowConfirmation>
				</PreAction>
				<HasRunningMessage>false</HasRunningMessage>
				<RunningMessage>
					<Text>false</Text>
				</RunningMessage>
				<TimeRange>false</TimeRange>
				<StartDateTimeOffset>false</StartDateTimeOffset>
				<EndDateTimeOffset>true</EndDateTimeOffset>
				<DayOfWeekConstraint>false</DayOfWeekConstraint>
				<ActiveUserRequirement>false</ActiveUserRequirement>
				<ActiveUserType>false</ActiveUserType>
				<Whose>false</Whose>
				<PreActionCacheDownload>false</PreActionCacheDownload>
				<Reapply>true</Reapply>
				<ReapplyLimit>false</ReapplyLimit>
				<RetryCount>false</RetryCount>
				<RetryWait>false</RetryWait>
				<TemporalDistribution>false</TemporalDistribution>
				<ContinueOnErrors>false</ContinueOnErrors>
				<PostActionBehavior>
					<Behavior>false</Behavior>
					<AllowCancel>false</AllowCancel>
					<Deadline>false</Deadline>
					<Title>false</Title>
					<Text>false</Text>
				</PostActionBehavior>
				<IsOffer>false</IsOffer>
				<AnnounceOffer>false</AnnounceOffer>
				<OfferCategory>false</OfferCategory>
				<OfferDescriptionHTML>false</OfferDescriptionHTML>
			</SettingsLocks>
		</DefaultAction>
	</Fixlet>
</BES>
